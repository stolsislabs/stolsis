/* Autogenerated file. Do not edit manually. */

import { Account } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
  function play() {
    const contract_name = "play";

    const create = async ({
      account,
      endtime,
      points_cap,
      tiles_cap,
    }: {
      account: Account;
      endtime: number;
      points_cap: number;
      tiles_cap: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "create", [
          provider.getWorldAddress(),
          endtime,
          points_cap,
          tiles_cap,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const spawn = async ({
      account,
      game_id,
      name,
      order,
    }: {
      account: Account;
      game_id: number;
      name: string;
      order: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "spawn", [
          provider.getWorldAddress(),
          game_id,
          name,
          order,
        ]);
      } catch (e) {
        console.error(e);
      }
    };

    const buy = async ({
      account,
      game_id,
    }: {
      account: Account;
      game_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "buy", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (e) {
        console.error(e);
      }
    };

    const draw = async ({
      account,
      game_id,
    }: {
      account: Account;
      game_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "draw", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (e) {
        console.error(e);
      }
    };

    const discard = async ({
      account,
      game_id,
    }: {
      account: Account;
      game_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "discard", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (e) {
        console.error(e);
      }
    };

    const build = async ({
      account,
      game_id,
      tile_id,
      orientation,
      x,
      y,
      role,
      spot,
    }: {
      account: Account;
      game_id: number;
      tile_id: number;
      orientation: number;
      x: number;
      y: number;
      role: number;
      spot: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "build", [
          provider.getWorldAddress(),
          game_id,
          tile_id,
          orientation,
          x,
          y,
          role,
          spot,
        ]);
      } catch (e) {
        console.error(e);
      }
    };

    const claim = async ({
      account,
      game_id,
    }: {
      account: Account;
      game_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "claim", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (e) {
        console.error(e);
      }
    };

    const finalize = async ({
      account,
      game_id,
    }: {
      account: Account;
      game_id: number;
    }) => {
      try {
        return await provider.execute(account, contract_name, "finalize", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (e) {
        console.error(e);
      }
    };

    return { create, spawn, buy, draw, discard, build, claim, finalize };
  }
  return {
    play: play(),
  };
}
