/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<
  ReturnType<typeof defineContractComponents>
>;

export function defineContractComponents(world: World) {
  return {
    Builder: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          player_id: RecsType.BigInt,
          tile_id: RecsType.Number,
          characters: RecsType.Number,
        },
        {
          metadata: {
            name: "Builder",
            types: ["u32", "felt252", "u32", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    Character: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          player_id: RecsType.BigInt,
          index: RecsType.Number,
          tile_id: RecsType.Number,
          spot: RecsType.Number,
          weight: RecsType.Number,
          power: RecsType.Number,
        },
        {
          metadata: {
            name: "Character",
            types: ["u32", "felt252", "u8", "u32", "u8", "u8", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    CharacterPosition: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          tile_id: RecsType.Number,
          spot: RecsType.Number,
          player_id: RecsType.BigInt,
          index: RecsType.Number,
        },
        {
          metadata: {
            name: "CharacterPosition",
            types: ["u32", "u32", "u8", "felt252", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    Game: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          over: RecsType.Boolean,
          discarded: RecsType.Number,
          built: RecsType.Number,
          tiles: RecsType.BigInt,
          tile_count: RecsType.Number,
          start_time: RecsType.BigInt,
          end_time: RecsType.BigInt,
          score: RecsType.Number,
          seed: RecsType.BigInt,
          mode: RecsType.Number,
          tournament_id: RecsType.BigInt,
        },
        {
          metadata: {
            name: "Game",
            types: [
              "u32",
              "bool",
              "u8",
              "u8",
              "u128",
              "u32",
              "u64",
              "u64",
              "u32",
              "felt252",
              "u8",
              "u64",
            ],
            customTypes: [],
          },
        },
      );
    })(),
    Player: (() => {
      return defineComponent(
        world,
        { id: RecsType.BigInt, name: RecsType.BigInt, master: RecsType.BigInt },
        {
          metadata: {
            name: "Player",
            types: ["felt252", "felt252", "felt252"],
            customTypes: [],
          },
        },
      );
    })(),
    Tile: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          id: RecsType.Number,
          player_id: RecsType.BigInt,
          plan: RecsType.Number,
          orientation: RecsType.Number,
          x: RecsType.Number,
          y: RecsType.Number,
          occupied_spot: RecsType.Number,
        },
        {
          metadata: {
            name: "Tile",
            types: ["u32", "u32", "felt252", "u8", "u8", "u32", "u32", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    TilePosition: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          x: RecsType.Number,
          y: RecsType.Number,
          tile_id: RecsType.Number,
        },
        {
          metadata: {
            name: "TilePosition",
            types: ["u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Tournament: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.BigInt,
          prize: RecsType.BigInt,
          top1_player_id: RecsType.BigInt,
          top2_player_id: RecsType.BigInt,
          top3_player_id: RecsType.BigInt,
          top1_score: RecsType.Number,
          top2_score: RecsType.Number,
          top3_score: RecsType.Number,
          top1_claimed: RecsType.Boolean,
          top2_claimed: RecsType.Boolean,
          top3_claimed: RecsType.Boolean,
        },
        {
          metadata: {
            name: "Tournament",
            types: [
              "u64",
              "felt252",
              "felt252",
              "felt252",
              "felt252",
              "u32",
              "u32",
              "u32",
              "bool",
              "bool",
              "bool",
            ],
            customTypes: [],
          },
        },
      );
    })(),
  };
}
