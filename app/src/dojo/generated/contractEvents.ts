/* Autogenerated file. Do not edit manually. */

import { num } from "starknet";

export enum WorldEvents {
  Built = "0x1d45258cfbc6a05a3a95aca416a9a9870a252afc3323a488c5e49221d6bad6f",
  Discarded = "0x9e199bdedd47e8aab3606d9c16c4423368e1500697a07ac8e076f7a28419d0",
  GameOver = "0x165460ded86991fa560a0d331810f83651da90c5df6d4b61357c3b3807ff41c",
  ScoredCity = "0x13c0924d68824f1ad0ed5427c0e35eaa49d61f5da204169b26b06fb6e2c7a9b",
  ScoredRoad = "0x2304c6f2d57ca37da7e5abd55b0c978d87f6157fc16bf66baa73808a3c1ba67",
  ScoredForest = "0x210ff37100b711d90d3168da4efccb4ce80d2654ae5e2c3be9438e88c515873",
  ScoredWonder = "0x499d4e33652bde92ccea823f6a57979fb7e4639ab50bb299486005d4d6ee7b",
  ClosedCity = "0x3b96e9c419ca1a927edd30f2c899a32a1b8065fcd816be7a74a19d0a98a2ae0",
  ClosedRoad = "0x4d12d862ba9d642f770001b477edfe134c03d5595a1b7d3c2083d2cc7bab3",
  ClosedForest = "0x1dc81f54551deca4f68a8a24f5fb0845e8636d08623916f8bd9f1adec5a20b8",
  ClosedWonder = "0x265a5732c47a7e3a683b81a8c768962c28e8bc39c55beaa8ab5e816c5b3e9d7",
}

export interface BaseEventData {
  game_id: number;
  event_type: WorldEvents;
  event_name: string;
}

export interface BuiltData extends BaseEventData {
  game_id: number;
  tile_id: number;
  x: number;
  y: number;
  player_id: string;
  player_name: string;
}

export interface DiscardedData extends BaseEventData {
  game_id: number;
  tile_id: number;
  player_id: string;
  player_name: string;
  order_id: number;
  points: number;
}

export interface GameOverData extends BaseEventData {
  game_id: number;
  tournament_id: number;
  game_score: number;
  game_start_time: number;
  game_end_time: number;
  player_id: string;
  player_name: string;
  player_master: string;
}

export interface ScoredCityData extends BaseEventData {
  game_id: number;
  points: number;
  size: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}

export interface ScoredRoadData extends BaseEventData {
  game_id: number;
  points: number;
  size: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}

export interface ScoredForestData extends BaseEventData {
  game_id: number;
  points: number;
  size: number;
  cities: number;
  roads: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}

export interface ScoredWonderData extends BaseEventData {
  game_id: number;
  points: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}

export interface ClosedCityData extends BaseEventData {
  game_id: number;
  tile_id: number;
  tile_x: number;
  tile_y: number;
  points: number;
  size: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}

export interface ClosedRoadData extends BaseEventData {
  game_id: number;
  tile_id: number;
  tile_x: number;
  tile_y: number;
  points: number;
  size: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}

export interface ClosedForestData extends BaseEventData {
  game_id: number;
  tile_id: number;
  tile_x: number;
  tile_y: number;
  points: number;
  size: number;
  roads: number;
  cities: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}

export interface ClosedWonderData extends BaseEventData {
  game_id: number;
  tile_id: number;
  tile_x: number;
  tile_y: number;
  points: number;
  player_id: string;
  player_name: string;
  player_master: string;
  player_order_id: number;
}
export type ParseEventResult = ReturnType<typeof parseEvent>;

export const parseEvent = (raw: any) => {
  switch (raw.keys[0]) {
    case WorldEvents.Built:
      return {
        event_type: WorldEvents.Built,
        event_name: "Built",
        game_id: Number(raw.keys[1]),
        tile_id: Number(raw.data[0]),
        x: Number(raw.data[1]),
        y: Number(raw.data[2]),
        player_id: num.toHexString(raw.data[3]),
        player_name: num.toHexString(raw.data[4]),
      } as BuiltData;

    case WorldEvents.Discarded:
      return {
        event_type: WorldEvents.Discarded,
        event_name: "Discarded",
        game_id: Number(raw.keys[1]),
        tile_id: Number(raw.data[0]),
        player_id: num.toHexString(raw.data[1]),
        player_name: num.toHexString(raw.data[2]),
        order_id: Number(raw.data[3]),
        points: Number(raw.data[4]),
      } as DiscardedData;

    case WorldEvents.GameOver:
      return {
        event_type: WorldEvents.GameOver,
        event_name: "GameOver",
        game_id: Number(raw.keys[1]),
        tournament_id: Number(raw.keys[2]),
        game_score: Number(raw.data[0]),
        game_start_time: Number(raw.data[1]),
        game_end_time: Number(raw.data[2]),
        player_id: num.toHexString(raw.data[3]),
        player_name: num.toHexString(raw.data[4]),
        player_master: num.toHexString(raw.data[5]),
      } as GameOverData;

    case WorldEvents.ScoredCity:
      return {
        event_type: WorldEvents.ScoredCity,
        event_name: "ScoredCity",
        game_id: Number(raw.keys[1]),
        points: Number(raw.data[0]),
        size: Number(raw.data[1]),
        player_id: num.toHexString(raw.data[2]),
        player_name: num.toHexString(raw.data[3]),
        player_master: num.toHexString(raw.data[4]),
        player_order_id: Number(raw.data[5]),
      } as ScoredCityData;

    case WorldEvents.ScoredRoad:
      return {
        event_type: WorldEvents.ScoredRoad,
        event_name: "ScoredRoad",
        game_id: Number(raw.keys[1]),
        points: Number(raw.data[0]),
        size: Number(raw.data[1]),
        player_id: num.toHexString(raw.data[2]),
        player_name: num.toHexString(raw.data[3]),
        player_master: num.toHexString(raw.data[4]),
        player_order_id: Number(raw.data[5]),
      } as ScoredRoadData;

    case WorldEvents.ScoredForest:
      return {
        event_type: WorldEvents.ScoredForest,
        event_name: "ScoredForest",
        game_id: Number(raw.keys[1]),
        points: Number(raw.data[0]),
        size: Number(raw.data[1]),
        cities: Number(raw.data[2]),
        roads: Number(raw.data[3]),
        player_id: num.toHexString(raw.data[4]),
        player_name: num.toHexString(raw.data[5]),
        player_master: num.toHexString(raw.data[6]),
        player_order_id: Number(raw.data[7]),
      } as ScoredForestData;

    case WorldEvents.ScoredWonder:
      return {
        event_type: WorldEvents.ScoredWonder,
        event_name: "ScoredWonder",
        game_id: Number(raw.keys[1]),
        points: Number(raw.data[0]),
        player_id: num.toHexString(raw.data[1]),
        player_name: num.toHexString(raw.data[2]),
        player_master: num.toHexString(raw.data[3]),
        player_order_id: Number(raw.data[4]),
      } as ScoredWonderData;

    case WorldEvents.ClosedCity:
      return {
        event_type: WorldEvents.ClosedCity,
        event_name: "ClosedCity",
        game_id: Number(raw.keys[1]),
        tile_id: Number(raw.data[0]),
        tile_x: Number(raw.data[1]),
        tile_y: Number(raw.data[2]),
        points: Number(raw.data[3]),
        size: Number(raw.data[4]),
        player_id: num.toHexString(raw.data[5]),
        player_name: num.toHexString(raw.data[6]),
        player_master: num.toHexString(raw.data[7]),
        player_order_id: Number(raw.data[8]),
      } as ClosedCityData;

    case WorldEvents.ClosedRoad:
      return {
        event_type: WorldEvents.ClosedRoad,
        event_name: "ClosedRoad",
        game_id: Number(raw.keys[1]),
        tile_id: Number(raw.data[0]),
        tile_x: Number(raw.data[1]),
        tile_y: Number(raw.data[2]),
        points: Number(raw.data[3]),
        size: Number(raw.data[4]),
        player_id: num.toHexString(raw.data[5]),
        player_name: num.toHexString(raw.data[6]),
        player_master: num.toHexString(raw.data[7]),
        player_order_id: Number(raw.data[8]),
      } as ClosedRoadData;

    case WorldEvents.ClosedForest:
      return {
        event_type: WorldEvents.ClosedForest,
        event_name: "ClosedForest",
        game_id: Number(raw.keys[1]),
        tile_id: Number(raw.data[0]),
        tile_x: Number(raw.data[1]),
        tile_y: Number(raw.data[2]),
        points: Number(raw.data[3]),
        size: Number(raw.data[4]),
        roads: Number(raw.data[5]),
        cities: Number(raw.data[6]),
        player_id: num.toHexString(raw.data[7]),
        player_name: num.toHexString(raw.data[8]),
        player_master: num.toHexString(raw.data[9]),
        player_order_id: Number(raw.data[10]),
      } as ClosedForestData;

    case WorldEvents.ClosedWonder:
      return {
        event_type: WorldEvents.ClosedWonder,
        event_name: "ClosedWonder",
        game_id: Number(raw.keys[1]),
        tile_id: Number(raw.data[0]),
        tile_x: Number(raw.data[1]),
        tile_y: Number(raw.data[2]),
        points: Number(raw.data[3]),
        player_id: num.toHexString(raw.data[4]),
        player_name: num.toHexString(raw.data[5]),
        player_master: num.toHexString(raw.data[6]),
        player_order_id: Number(raw.data[7]),
      } as ClosedWonderData;

    default:
      return {
        gameId: undefined,
        event_type: raw.keys[0],
        event_name: raw.keys[0],
      };
      break;
  }
};
